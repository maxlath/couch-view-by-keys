#!/usr/bin/env node
const program = require('commander')

program
.option('-d, --debug', 'Debug')
.option('-n, --ndjson', 'Log as NDJSON')
.option('-j, --json <indentation>', 'JSON indentation')
.option('-k, --keep <attributes>', 'Pick attributes to keep')
.parse(process.argv)

const { debug, ndjson, json, keep } = program
const indentation = /^\d+$/.test(json) ? parseInt(json) : 0

var [ url, ...keys ] = program.args

const viewUrlPattern = /(https?):\/\/([^@]+)@(\w+):(\d+)\/([\w-_]+)\/_design\/([\w-_]+)\/_view\/([\w-_]+)/

const urlData = url.match(viewUrlPattern)

if (!urlData) {
  // Known case where this is a false negative: when no port is required
  console.error("the provided URL didn't match the CouchDB view URL pattern")
  process.exit(1)
}

// port, hostname, user, pass, auth, ssl, debug
const [ match, protocol, auth, hostname, port, dbName, designDocName, viewName ] = url.match(viewUrlPattern)
const ssl = protocol === 'https'

const config = { hostname, port, ssl, auth, debug }
const db = require('blue-cot')(config)(dbName, designDocName)

keys = keys.map(require('../lib/parse_key'))

// Default to ndjson
const logger = json ? require('../lib/json')(indentation) : require('../lib/ndjson')

const keeper = require('../lib/keep')(keep)

db.viewByKeys(viewName, keys)
.then(keeper)
.then(logger)
.catch(console.error)

// Prevent logging an EPIPE error when piping the output
// cf https://github.com/maxlath/wikidata-cli/issues/7
process.stdout.on('error', function (err) {
  if (err.code !== 'EPIPE') throw err
})
